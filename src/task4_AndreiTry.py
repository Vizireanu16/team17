#!/usr/bin/env python
import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import numpy as np
import random
import time
from move_tb3 import MoveTB3

class Task4:

    global counter
    counter = 0

    def __init__(self):
        self.pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
        rospy.init_node('publisher_node', anonymous=True)
        self.rate = rospy.Rate(10) # hz

        self.robot_controller = MoveTB3()
        #self.move_rate = 'fast'
        self.ctrl_c = False
        rospy.on_shutdown(self.shutdownhook)

        rospy.loginfo("publisher node is active...")


    def shutdownhook(self):
        self.shutdown_function()
        self.ctrl_c = True

    def shutdown_function(self):
        print("stopping publisher node at: {}".format(rospy.get_time()))
        self.robot_controller.stop()

    def move1(self):
        time.sleep(1)
        self.robot_controller.set_move_cmd(
        0.2600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.publish()
        time.sleep(4.700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.stop()


    def move2(self):
        print "move2()"
        self.robot_controller.set_move_cmd(
        0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        -1.8200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.publish()
        time.sleep(0.800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        #self.robot_controller.stop()

    def move3(self):
        self.robot_controller.set_move_cmd(
        0.2600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.publish()
        time.sleep(2.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

    def move4(self):
        self.robot_controller.set_move_cmd(
        0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        1.8200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.publish()
        time.sleep(0.800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

    def move5(self):
        self.robot_controller.set_move_cmd(
        0.2600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
        0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
        self.robot_controller.publish()
        time.sleep(2.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)


    def main_loop(self):
        self.move1()
        self.move2()
        self.move3()
        self.move4()
        self.move5()



        #self.vel_cmd.linear.x = 0.26 # m/s
        #self.pub.publish(self.vel_cmd)
        #time.sleep(3)

        #i = 0
        #while i < 2:

        #    self.vel_cmd.linear.x = 0.26 # m/s
        #    self.pub.publish(self.vel_cmd)
        #    time.sleep(4.7)

        #    time.sleep(2)
        #    self.vel_cmd.angular.z = -1.82 # m/s
        #    self.pub.publish(self.vel_cmd)

        #    i = i + 1


        #self.vel_cmd.linear.x = 0 # m/s
        #self.vel_cmd.angular.z = 1.82 # m/s
        #self.pub.publish(self.vel_cmd)
        print "Okay"
        #self.robot_controller.set_move_cmd(0.26, 0.0)
        #self.robot_controller.publish()
        #time.sleep(3)

        #while not self.ctrl_c:



            #self.vel_cmd.linear.x = 0 # m/s
            #self.vel_cmd.angular.z = 0 # m/s
            #self.pub.publish(self.vel_cmd)

            #self.pub.publish(self.vel_cmd)
            #self.rate.sleep()

if __name__ == '__main__':
    publisher_instance = Task4()
    try:
        publisher_instance.main_loop()
    except rospy.ROSInterruptException:
        pass
